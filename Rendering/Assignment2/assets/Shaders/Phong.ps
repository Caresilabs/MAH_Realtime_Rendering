
cbuffer PerObjectBuffer : register(b2)
{
	float3 Ka;
	bool   KaUseTexture;

	float3 Kd;
	bool   KdUseTexture;

	float3 Ks;
	bool   KsUseTexture;

	int	  NormalUseTexture;
	int	  MaskUseTexture;

	float2 Pad;
};

struct PSIn
{
	float4 Pos  : SV_Position;
	float3x3 Normals : NORMALS;
	float2 TexCoord : TEX;
	float3 LightPos : LIGHTPOS;
	float3 WorldPos : WORLDPOS;
	float3 CameraPos : CAMERAPOS;
};

Texture2D DiffuseTexture : register(t0);
Texture2D SpecularTexture : register(t1);
Texture2D NormalTexture : register(t2);
Texture2D MaskTexture : register(t3);
sampler Sampler : register(s0);

float4 PS_main(PSIn input) : SV_Target
{	
	// Mask
	if (MaskUseTexture) {
		if (MaskTexture.Sample(Sampler, input.TexCoord).x == 0) {
			discard;
		}
	}

	// Normal
	float3 normal;
	if (NormalUseTexture) {
		float3 texNormal = 2.0f * NormalTexture.Sample(Sampler, input.TexCoord) - 1.0f;
		normal = normalize( mul(texNormal, input.Normals) );
	} else {
		normal = normalize(input.Normals[2]);
	}
	
	float3 lightDir = normalize(  input.LightPos - input.WorldPos );
	float3 viewDir = normalize( input.CameraPos - input.WorldPos );

	float texScale = 1.0f;

	// Diffuse
	float3 diffuse;
	if (KdUseTexture) {
		diffuse = DiffuseTexture.Sample(Sampler, input.TexCoord * texScale) * Kd;
		diffuse *= max(0, dot(normal, lightDir)) + Ka;				
	} else {
		diffuse = Ka + ( max(0, dot(normal, lightDir))) * Kd;
	}

	// Specular
	float specPow = 30.0;
	float3 specular;
	if (KsUseTexture) {
		specular = pow( max(0, dot(-reflect(lightDir, normal), viewDir)), specPow) * SpecularTexture.Sample(Sampler, input.TexCoord).xxx;
	 } else {
		specular = pow( max(0, dot(-reflect(lightDir, normal), viewDir)), specPow) * Ks;
	 }

	// return float4((normal * 0.5 + 0.5), 1);
	return float4( diffuse + specular, 1);
}