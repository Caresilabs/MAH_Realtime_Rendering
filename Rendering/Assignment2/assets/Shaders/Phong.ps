
cbuffer PerObjectBuffer : register(b2)
{
	float3 Ka;
	bool   KaUseTexture;

	float3 Kd;
	bool   KdUseTexture;

	float3 Ks;
	bool   KsUseTexture;
};

struct PSIn
{
	float4 Pos  : SV_Position;
	float3 Normal : NORMAL;
	float2 TexCoord : TEX;
	float3 LightDir : LIGHTDIR;
	float3 ViewDir : VIEWDIR;
};

Texture2D DiffuseTexture : register(t0);
Texture2D SpecularTexture : register(t1);
sampler Sampler : register(s0);

float4 PS_main(PSIn input) : SV_Target
{	
	// Arrange
	float3 normal = normalize(input.Normal);
	float3 lightDir = normalize(input.LightDir);
	float3 viewDir = normalize(input.ViewDir);

	// Diffuse
	float3 diffuse;
	if (KdUseTexture) {
		//diffuse += max(0, dot(normal, lightDir)) * Kd;

		diffuse = DiffuseTexture.Sample(Sampler, input.TexCoord) * Kd;
		diffuse *= max(0, dot(normal, lightDir)) + Ka; //DiffuseTexture.Sample(Sampler, input.TexCoord);
	} else {
		diffuse = Ka + ( max(0, dot(normal, lightDir))) * Kd;
	}

	// Specular
	float specPow = 90.0;
	float3 specular;
	if (KsUseTexture) {
		specular = pow( max(0, dot(-reflect(lightDir, normal), -viewDir)), specPow) * SpecularTexture.Sample(Sampler, input.TexCoord).xxx;
	 } else {
		specular = pow( max(0, dot(-reflect(lightDir, normal), -viewDir)), specPow) * Ks;
	 }

	return float4( diffuse + specular, 1);
}