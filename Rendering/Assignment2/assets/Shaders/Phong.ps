
cbuffer PerObjectBuffer : register(b2)
{
	bool   UseTexture;
	float3 Ka;

	float3 Kd;
	float1 Pad2;

	float3 Ks;
	float1 Pad3;
};

struct PSIn
{
	float4 Pos  : SV_Position;
	float3 Normal : NORMAL;
	float2 TexCoord : TEX;
	float3 LightDir : LIGHTDIR;
	float3 ViewDir : VIEWDIR;
};

Texture2D DiffuseTexture : register(t0);
sampler Sampler : register(s0);

float4 PS_main(PSIn input) : SV_Target
{	
	// Arrange
	float3 normal = normalize(input.Normal);
	float3 lightDir = normalize(input.LightDir);
	float3 viewDir = normalize(input.ViewDir);

	// Ambient
	float3 ambient = Ka;

	// Diffuse
	float3 diffuse;
	if (UseTexture) {
		diffuse = max(0, dot(normal, lightDir)) * Kd * DiffuseTexture.Sample(Sampler, input.TexCoord);
	} else {
		diffuse = max(0, dot(normal, lightDir)) * Kd;
	}

	// Specular
	float specPow = 120.0;
	float3 specular = pow( max(0, dot(-reflect(lightDir, normal), -viewDir)), specPow) * Ks;

	return float4(ambient + diffuse + specular, 1);
}